package main

import (
	"fmt"
	"os"
	"strings"

	"itdobro/config"
	"itdobro/pkg/logger"
	"itdobro/pkg/templates"
	"itdobro/pkg/utils"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

func main() {
	// Init logger...
	log := logger.GetLogger()
	// Load dotenv variables
	if err := godotenv.Load(); err != nil {
		log.Error("Error loading .env file")
	}
	// Set bot token
	bot, err := utils.CreateBot(utils.GetBotToken())
	if err != nil {
		log.Panic(err)
	}

	// @ Set false to the Production
	dbug := os.Getenv("DEBUG")
	// ? Get Debug mode from .env file
	switch dbug {
	case "true", "TRUE":
		bot.Debug = true
	default:
		bot.Debug = false
	}

	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω!", bot.Self.UserName)

	fmt.Printf("\nDEBUG=%s\n\n", dbug)

	// @ Getting updates
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60 // set update's Timeout...

	// TODO: Make refatoring!

	updates, err := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		// get messages
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")
		// Set parse mode to Markdown
		msg.ParseMode = "markdown"

		switch update.Message.Text {
		case "/start":
			msg.Text = templates.Welcome
			msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
		case "–ü–æ–º–æ—â—å", "/help":
			msg.Text = templates.Welcome
			msg.ReplyMarkup = utils.CreateHelpMenuKeyboard()
		case "–ö–æ–º–∞–Ω–¥—ã", "–∫–æ–º–∞–Ω–¥—ã", "/commands":
			msg.Text = templates.Commands
			msg.ReplyMarkup = utils.CreateHelpMenuKeyboard()
		case "–û–±—Ä–∞—Ç–∏—Ç—å—Å—è", "/treatment":
			msg.Text = fmt.Sprintf(`–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ %s —Å–æ —Å–≤–æ–∏–º –≤–æ–ø—Ä–æ—Å–æ–º/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º`, config.TgUserName)
			msg.ReplyMarkup = utils.CreateSupportMenuKeyboard()
			if msg.Text == "–ù–∞–∑–∞–¥" {
				// msg.Text = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥"
				msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
			}
		case "–†–µ–∫–ª–∞–º–∞", "/ads":
			msg.Text = templates.ADS
			utils.SetUserStatus(update.Message.From.ID, "waiting_for_ad_message")
		case "–õ–°", "/ls":
			msg.Text = templates.LS
			utils.SetUserStatus(update.Message.From.ID, "waiting_for_ls_message")
		case "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç", "/SuggestPost":
			utils.SetUserStatus(update.Message.From.ID, "waiting_for_post_title")
			msg.Text = "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞:"
		case "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "/contacts":
			utils.SetUserStatus(update.Message.From.ID, "")
			msg.Text = templates.Contacts
			if msg.Text == "–ù–∞–∑–∞–¥" {
				msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
			}
		case "–ù–∞–∑–∞–¥":
			utils.SetUserStatus(update.Message.From.ID, "")
			msg.Text = "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
			msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
		default:
			status := utils.GetUserStatus(update.Message.From.ID)
			if status == "waiting_for_ad_message" {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				user := update.Message.From
				username := "@" + user.UserName

				adMessage := fmt.Sprintf("üì¢ –†–µ–∫–ª–∞–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç %s:\n%s\n\n@%s", username, update.Message.Text, config.TgUserName)

				utils.SendToGroup(bot, config.GetGroupID(), adMessage)

				msg.Text = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
				utils.SetUserStatus(update.Message.From.ID, "")
				msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
			} else if status == "waiting_for_post_title" {
				utils.SetUserStatus(update.Message.From.ID, "waiting_for_post_text:"+update.Message.Text)
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:"
			} else if strings.HasPrefix(status, "waiting_for_post_text:") {
				utils.SetUserStatus(update.Message.From.ID, "waiting_for_media_links:"+status[len("waiting_for_post_text:"):])
				msg.Text = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (URL1, URL2, ...)." +
					"\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã."
				msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"),
					),
				)
			} else if strings.HasPrefix(status, "waiting_for_media_links:") {
				parts := strings.Split(status, ":")
				if len(parts) != 2 {
					continue
				}
				postTitle := parts[1]

				mediaLinks := update.Message.Text
				if mediaLinks != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
					mediaLinks = strings.TrimSpace(mediaLinks)

					media := []interface{}{}

					for _, link := range strings.Split(mediaLinks, ",") {
						trimmedLink := strings.TrimSpace(link)
						if isPhotoLink(trimmedLink) {
							media = append(media, tgbotapi.NewInputMediaPhoto(trimmedLink))
						} else if isVideoLink(trimmedLink) {
							video := tgbotapi.NewInputMediaVideo(trimmedLink)
							media = append(media, video)
						}
					}

					if len(media) > 0 {
						mediaMsg := tgbotapi.NewMediaGroup(int64(update.Message.From.ID), media)
						mediaMsg.ChatID = int64(config.GetGroupID())
						bot.Send(mediaMsg)
					}
				}

				groupMessage := fmt.Sprintf("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –æ—Ç %s:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: %s\n–¢–µ–∫—Å—Ç: %s",
					utils.GetUserLink(update.Message.From), postTitle, status[len("waiting_for_post_text:"):])

				if mediaLinks != "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" {
					mediaMessage := "–ú–µ–¥–∏–∞:\n" + strings.Join(strings.Split(mediaLinks, ","), "\n")
					groupMessage = fmt.Sprintf("%s\n\n%s", groupMessage, mediaMessage)
				}

				utils.SendToGroup(bot, config.GetGroupID(), groupMessage)

				msg.Text = "–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–¥–ª–æ–∂–∫—É!"
				utils.SetUserStatus(update.Message.From.ID, "")
				msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
			} else if status == "waiting_for_ls_message" {
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
				user := update.Message.From
				username := "@" + user.UserName

				adMessage := fmt.Sprintf("–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç %s:\n%s", username, update.Message.Text)

				utils.SendToGroup(bot, config.GetGroupID(), adMessage)

				msg.Text = "–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
				utils.SetUserStatus(update.Message.From.ID, "")
				msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
			} else {
				utils.SetUserStatus(update.Message.From.ID, "")
				msg.Text = "–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
				msg.ReplyMarkup = utils.CreateMainMenuKeyboard()
			}
		}

		bot.Send(msg)
	}
}

func isPhotoLink(link string) bool {
	return strings.HasSuffix(link, ".jpg") || strings.HasSuffix(link, ".png")
}

func isVideoLink(link string) bool {
	return strings.HasSuffix(link, ".mp4") || strings.HasSuffix(link, ".avi")
}
